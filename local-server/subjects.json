{
  "HTML": [
    {
      "Topic Title": "Basic HTML Structure",
      "Topic Description": "The foundation of any HTML document includes the DOCTYPE declaration, followed by key elements such as <html>, <head>, <title>, and <body>. Understanding these elements helps in creating a simple webpage layout.",
      "Assignments": [
        "Create a basic HTML document with a title, headings, paragraphs, and lists.",
        "Include images and hyperlinks in your webpage."
      ]
    },
    {
      "Topic Title": "Text Formatting",
      "Topic Description": "Text formatting in HTML involves using tags to style text content. This includes making text bold, italic, underlined, marked, small, and even creating subscript or superscript text.",
      "Assignments": [
        "Use different text formatting tags like <strong>, <em>, <u>, <mark>, and <small>.",
        "Simulate a blog post with headings, paragraphs, quotes, and links."
      ]
    },
    {
      "Topic Title": "Lists",
      "Topic Description": "Lists are used to group related items together. Ordered lists (<ol>) display items in a numbered format, while unordered lists (<ul>) use bullets. Lists can also be nested within each other for more complex structures.",
      "Assignments": [
        "Create ordered and unordered lists.",
        "Create nested lists (both ordered and unordered)."
      ]
    },
    {
      "Topic Title": "Tables",
      "Topic Description": "Tables are used to organize data into rows and columns. Key tags include <table>, <tr> (table row), <td> (table data), and <th> (table header). Tables can also have headers and footers for better organization.",
      "Assignments": [
        "Create a table with rows and columns.",
        "Add table headers, footers, and nested tables."
      ]
    },
    {
      "Topic Title": "Forms",
      "Topic Description": "Forms collect user input and include various elements such as text fields, radio buttons, checkboxes, and buttons. Key tags include <form>, <input>, <textarea>, and <select>. Forms are essential for user interaction on websites.",
      "Assignments": [
        "Create a simple contact form with text fields, radio buttons, checkboxes, and a submit button.",
        "Design a survey form with various input types like dropdowns, date pickers, and text areas."
      ]
    },
    {
      "Topic Title": "Media",
      "Topic Description": "Media elements like images, videos, and audio enhance the visual and auditory appeal of a webpage. The <img> tag is used for images, while <video> and <audio> tags embed multimedia content directly into the page.",
      "Assignments": [
        "Embed a YouTube video in your webpage.",
        "Add an audio player to your page."
      ]
    },
    {
      "Topic Title": "Semantic HTML",
      "Topic Description": "Semantic HTML uses meaningful tags like <header>, <footer>, <article>, and <section> to structure content. This improves the readability and accessibility of the webpage, and helps search engines better understand the content.",
      "Assignments": [
        "Use semantic elements like <article>, <section>, <header>, <footer>, and <aside> to structure a news article page.",
        "Create a navigation menu using <nav> and list items."
      ]
    },
    {
      "Topic Title": "HTML5 Features",
      "Topic Description": "HTML5 introduced new elements and APIs such as <canvas> for drawing graphics, <video> and <audio> for embedding multimedia, and local storage and geolocation for advanced web applications.",
      "Assignments": [
        "Use the <canvas> element to draw shapes.",
        "Embed video and audio files using the <video> and <audio> tags with controls."
      ]
    },
    {
      "Topic Title": "Advanced Layouts",
      "Topic Description": "Advanced layouts often involve structuring complex pages using <div> elements and CSS. Techniques like CSS Grid and Flexbox allow for responsive designs that adapt to different screen sizes and devices.",
      "Assignments": [
        "Create a multi-column layout using <div> elements.",
        "Use CSS Grid or Flexbox for a responsive layout."
      ]
    },
    {
      "Topic Title": "Projects",
      "Topic Description": "Building complete projects helps apply HTML knowledge in practical scenarios. Projects like personal portfolios, landing pages, resumes, and recipe pages incorporate various HTML elements and techniques learned.",
      "Assignments": [
        "Create a personal portfolio page with your details, skills, and projects.",
        "Design a simple landing page for a product or service.",
        "Build your resume in HTML format.",
        "Design a recipe page with a list of ingredients and step-by-step instructions."
      ]
    },
    {
      "Topic Title": "Accessibility",
      "Topic Description": "Accessibility in web design ensures that websites are usable by people with disabilities. Techniques include using labels and fieldsets in forms, implementing ARIA attributes, and ensuring compatibility with screen readers and keyboard navigation.",
      "Assignments": [
        "Create forms with labels and fieldsets for better accessibility.",
        "Use ARIA (Accessible Rich Internet Applications) attributes to improve the accessibility of dynamic content."
      ]
    }
  ],
  "CSS": [
    {
      "Topic Title": "CSS Basics",
      "Topic Description": "CSS (Cascading Style Sheets) is used to style and layout web pages. It allows you to apply styles to HTML elements and control the layout of multiple web pages all at once.",
      "Assignments": [
        "Create a basic stylesheet and link it to an HTML document.",
        "Style text elements such as headings, paragraphs, and links."
      ]
    },
    {
      "Topic Title": "Selectors and Combinators",
      "Topic Description": "Selectors are used to target HTML elements to apply styles. Combinators allow you to select elements based on their relationship to other elements.",
      "Assignments": [
        "Use basic selectors like element, class, and ID selectors.",
        "Use combinators like descendant, child, adjacent sibling, and general sibling selectors."
      ]
    },
    {
      "Topic Title": "Box Model",
      "Topic Description": "The CSS box model describes how the size of elements is calculated, including padding, borders, and margins.",
      "Assignments": [
        "Create an element with padding, border, and margin to understand the box model.",
        "Experiment with the `box-sizing` property."
      ]
    },
    {
      "Topic Title": "Positioning",
      "Topic Description": "CSS positioning allows you to place elements in specific locations on the page using properties like `position`, `top`, `right`, `bottom`, and `left`.",
      "Assignments": [
        "Use static, relative, absolute, and fixed positioning on different elements.",
        "Create a layout using different positioning techniques."
      ]
    },
    {
      "Topic Title": "Flexbox",
      "Topic Description": "Flexbox is a layout model that provides an easy and efficient way to create flexible and responsive layouts.",
      "Assignments": [
        "Create a simple flex container and use properties like `justify-content`, `align-items`, and `flex-direction`.",
        "Build a responsive navigation bar using Flexbox."
      ]
    },
    {
      "Topic Title": "Grid Layout",
      "Topic Description": "CSS Grid Layout is a two-dimensional layout system for the web. It allows you to create complex layouts more easily than with traditional methods.",
      "Assignments": [
        "Create a grid container and define rows and columns using `grid-template-rows` and `grid-template-columns`.",
        "Build a complete web page layout using CSS Grid."
      ]
    },
    {
      "Topic Title": "Responsive Design",
      "Topic Description": "Responsive design ensures that web pages look good on all devices. Techniques include using media queries, flexible grid layouts, and responsive images.",
      "Assignments": [
        "Use media queries to apply different styles for different screen sizes.",
        "Create a responsive web page layout that adapts to mobile, tablet, and desktop screens."
      ]
    },
    {
      "Topic Title": "Typography",
      "Topic Description": "Typography in CSS involves styling text, including setting fonts, sizes, line heights, and text alignment.",
      "Assignments": [
        "Apply different font families, sizes, and weights to text elements.",
        "Use web fonts from services like Google Fonts."
      ]
    },
    {
      "Topic Title": "Transitions and Animations",
      "Topic Description": "CSS transitions and animations provide a way to animate changes to CSS properties, creating dynamic and interactive web pages.",
      "Assignments": [
        "Create a simple transition effect for hover states.",
        "Use keyframes to create a CSS animation."
      ]
    },
    {
      "Topic Title": "Pseudo-classes and Pseudo-elements",
      "Topic Description": "Pseudo-classes and pseudo-elements allow you to apply styles to elements based on their state or position in the document tree.",
      "Assignments": [
        "Use pseudo-classes like `:hover`, `:focus`, and `:nth-child` to style elements.",
        "Use pseudo-elements like `::before` and `::after` to insert content."
      ]
    },
    {
      "Topic Title": "CSS Variables",
      "Topic Description": "CSS variables (custom properties) allow you to store values that can be reused throughout a stylesheet, making it easier to manage and maintain.",
      "Assignments": [
        "Define CSS variables and use them in your styles.",
        "Create a theme switcher using CSS variables."
      ]
    },
    {
      "Topic Title": "Advanced Selectors",
      "Topic Description": "Advanced CSS selectors provide powerful ways to target elements based on attributes, states, and hierarchical relationships.",
      "Assignments": [
        "Use attribute selectors to style elements based on their attributes.",
        "Combine multiple selectors to target specific elements more precisely."
      ]
    }
  ],
  "Javascript": [
    {
      "Topic Title": "JavaScript Basics",
      "Topic Description": "JavaScript is a programming language that allows you to implement complex features on web pages. It enables dynamic content, control multimedia, animate images, and much more.",
      "Assignments": [
        "Create a simple JavaScript file and link it to an HTML document.",
        "Write a script to display a greeting message using `alert`."
      ]
    },
    {
      "Topic Title": "Variables and Data Types",
      "Topic Description": "Variables store data values and are declared using `var`, `let`, or `const`. JavaScript supports various data types including strings, numbers, booleans, objects, and arrays.",
      "Assignments": [
        "Declare variables using `var`, `let`, and `const`.",
        "Create variables of different data types and log them to the console."
      ]
    },
    {
      "Topic Title": "Operators and Expressions",
      "Topic Description": "Operators are used to perform operations on variables and values. Expressions combine values and operators to produce a new value.",
      "Assignments": [
        "Use arithmetic operators to perform basic math operations.",
        "Create expressions using assignment, comparison, and logical operators."
      ]
    },
    {
      "Topic Title": "Functions",
      "Topic Description": "Functions are blocks of code designed to perform a particular task. They are executed when something invokes them (calls them).",
      "Assignments": [
        "Create a function to calculate the sum of two numbers.",
        "Write a function that takes an argument and returns a greeting message."
      ]
    },
    {
      "Topic Title": "Control Structures",
      "Topic Description": "Control structures such as conditionals (`if`, `else`, `switch`) and loops (`for`, `while`, `do...while`) control the flow of execution in a program.",
      "Assignments": [
        "Write an `if` statement to check if a number is positive, negative, or zero.",
        "Create a `for` loop to iterate through an array of numbers."
      ]
    },
    {
      "Topic Title": "Objects and Arrays",
      "Topic Description": "Objects are collections of related data and functionality, and arrays are used to store multiple values in a single variable.",
      "Assignments": [
        "Create an object to store information about a person (name, age, etc.).",
        "Create an array of fruits and iterate through it using a loop."
      ]
    },
    {
      "Topic Title": "DOM Manipulation",
      "Topic Description": "The Document Object Model (DOM) is a programming interface for HTML documents. It represents the page so that programs can change the document structure, style, and content.",
      "Assignments": [
        "Select an HTML element and change its content using `innerHTML`.",
        "Add a new element to the DOM using `createElement` and `appendChild`."
      ]
    },
    {
      "Topic Title": "Event Handling",
      "Topic Description": "Events are actions that occur when a user interacts with a web page. JavaScript can capture these events and respond to them.",
      "Assignments": [
        "Add a click event listener to a button that displays an alert.",
        "Create a form validation script that checks if all fields are filled."
      ]
    },
    {
      "Topic Title": "ES6 Features",
      "Topic Description": "ECMAScript 6 (ES6) introduced new features and syntax such as arrow functions, template literals, destructuring, and modules.",
      "Assignments": [
        "Rewrite a function using an arrow function.",
        "Use template literals to create a multi-line string."
      ]
    },
    {
      "Topic Title": "Asynchronous JavaScript",
      "Topic Description": "Asynchronous programming allows you to write code that doesn't block the main thread. Promises and async/await are used to handle asynchronous operations.",
      "Assignments": [
        "Create a promise that resolves after 2 seconds.",
        "Write an async function that fetches data from an API."
      ]
    },
    {
      "Topic Title": "Error Handling",
      "Topic Description": "Error handling in JavaScript is performed using `try...catch` blocks. It allows you to gracefully handle errors and take appropriate action.",
      "Assignments": [
        "Use `try...catch` to handle errors in a function.",
        "Throw a custom error and catch it."
      ]
    },
    {
      "Topic Title": "Debugging",
      "Topic Description": "Debugging is the process of finding and fixing errors in your code. Tools like browser developer tools and debugging methods help in this process.",
      "Assignments": [
        "Use `console.log` to debug a script.",
        "Set breakpoints and step through code using browser developer tools."
      ]
    }
  ],
  "ReactJS": [
    [
      {
        "Topic Title": "Introduction to React",
        "Topic Description": "React is a JavaScript library for building user interfaces. It enables developers to create large web applications that can update and render efficiently in response to data changes.",
        "Assignments": [
          "Set up a new React project using Create React App.",
          "Create a simple React component that displays 'Hello, World!'."
        ]
      },
      {
        "Topic Title": "JSX",
        "Topic Description": "JSX is a syntax extension for JavaScript. It looks similar to HTML and is used with React to describe what the UI should look like.",
        "Assignments": [
          "Write a JSX expression to display a greeting message.",
          "Create a JSX element that includes attributes and nested elements."
        ]
      },
      {
        "Topic Title": "Components and Props",
        "Topic Description": "Components are the building blocks of a React application. Props are used to pass data from one component to another.",
        "Assignments": [
          "Create a functional component that accepts props and displays them.",
          "Build a parent component that passes data to a child component via props."
        ]
      },
      {
        "Topic Title": "State and Lifecycle",
        "Topic Description": "State is a built-in object used to hold data or information about the component. Lifecycle methods are used to run code at particular times in a component's life.",
        "Assignments": [
          "Create a class component with state that toggles between 'ON' and 'OFF'.",
          "Use the `componentDidMount` lifecycle method to fetch data when a component mounts."
        ]
      },
      {
        "Topic Title": "Event Handling",
        "Topic Description": "Handling events with React elements is very similar to handling events on DOM elements. React provides a way to handle events using JSX.",
        "Assignments": [
          "Add an onClick event to a button that updates the component's state.",
          "Create a form with an onSubmit event that prevents the default form submission."
        ]
      },
      {
        "Topic Title": "Conditional Rendering",
        "Topic Description": "Conditional rendering in React works the same way conditions work in JavaScript. Use JavaScript operators like `if` or the conditional (ternary) operator to create elements representing the current state.",
        "Assignments": [
          "Render a component conditionally based on the state value.",
          "Use the ternary operator to conditionally render elements."
        ]
      },
      {
        "Topic Title": "Lists and Keys",
        "Topic Description": "Rendering lists of data is a common pattern in React. Keys help React identify which items have changed, are added, or are removed.",
        "Assignments": [
          "Create a list of items from an array and display them using the `map` function.",
          "Assign unique keys to each list item."
        ]
      },
      {
        "Topic Title": "Forms",
        "Topic Description": "Handling form elements in React involves maintaining and updating form state.",
        "Assignments": [
          "Create a controlled form component with input fields.",
          "Handle form submission and display the input values."
        ]
      },
      {
        "Topic Title": "Lifting State Up",
        "Topic Description": "Lifting state up involves moving state to a common ancestor of the components that need it, enabling shared state between components.",
        "Assignments": [
          "Lift the state up from a child component to a parent component.",
          "Share the state between multiple child components."
        ]
      },
      {
        "Topic Title": "Hooks",
        "Topic Description": "Hooks are functions that let you use state and other React features without writing a class. Common hooks include `useState`, `useEffect`, and `useContext`.",
        "Assignments": [
          "Use the `useState` hook to manage component state in a functional component.",
          "Implement the `useEffect` hook to perform side effects in a functional component."
        ]
      },
      {
        "Topic Title": "Context API",
        "Topic Description": "The Context API is used to share state across the entire app (or part of it) without passing props down manually at every level.",
        "Assignments": [
          "Create a context to share a theme across multiple components.",
          "Consume the context value in a child component using the `useContext` hook."
        ]
      },
      {
        "Topic Title": "React Router",
        "Topic Description": "React Router is a library for routing in React applications. It allows navigation between different components in a React application, changing the browser URL and keeping the UI in sync with the URL.",
        "Assignments": [
          "Set up React Router and create routes for different components.",
          "Implement navigation links to switch between routes."
        ]
      },
      {
        "Topic Title": "Performance Optimization",
        "Topic Description": "Performance optimization in React involves techniques like memoization and code splitting to improve the performance of a React application.",
        "Assignments": [
          "Use `React.memo` to prevent unnecessary re-renders of functional components.",
          "Implement code splitting using React.lazy and Suspense."
        ]
      }
    ]
  ]
}
